// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=mock/user.go
//

// Package mock_main is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockcaculate is a mock of caculate interface.
type Mockcaculate struct {
	ctrl     *gomock.Controller
	recorder *MockcaculateMockRecorder
}

// MockcaculateMockRecorder is the mock recorder for Mockcaculate.
type MockcaculateMockRecorder struct {
	mock *Mockcaculate
}

// NewMockcaculate creates a new mock instance.
func NewMockcaculate(ctrl *gomock.Controller) *Mockcaculate {
	mock := &Mockcaculate{ctrl: ctrl}
	mock.recorder = &MockcaculateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcaculate) EXPECT() *MockcaculateMockRecorder {
	return m.recorder
}

// Minus mocks base method.
func (m *Mockcaculate) Minus(a, b int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Minus", a, b)
	ret0, _ := ret[0].(int)
	return ret0
}

// Minus indicates an expected call of Minus.
func (mr *MockcaculateMockRecorder) Minus(a, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Minus", reflect.TypeOf((*Mockcaculate)(nil).Minus), a, b)
}

// Plus mocks base method.
func (m *Mockcaculate) Plus(a, b int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plus", a, b)
	ret0, _ := ret[0].(int)
	return ret0
}

// Plus indicates an expected call of Plus.
func (mr *MockcaculateMockRecorder) Plus(a, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plus", reflect.TypeOf((*Mockcaculate)(nil).Plus), a, b)
}
